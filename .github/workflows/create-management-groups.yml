name: Deploy a subset of management groups using an SPN

env:
  az_powershell_min_version: '9.6.0'

on:
  workflow_dispatch:


jobs:
  deploy-management-groups:
    runs-on: [self-hosted, linux]
    permissions:
      id-token: write
      contents: read
    outputs:
      Andor_MG_Resource_Id: ${{ steps.managementGroups.outputs.Andor_MG_Resource_Id }}
      Platform_MG_Resource_Id: ${{ steps.managementGroups.outputs.Platform_MG_Resource_Id }}
      Connectivity_MG_Resource_Id: ${{ steps.managementGroups.outputs.Connectivity_MG_Resource_Id }}
      Identity_MG_Resource_Id: ${{ steps.managementGroups.outputs.Identity_MG_Resource_Id }}
      Management_MG_Resource_Id: ${{ steps.managementGroups.outputs.Management_MG_Resource_Id }}
      Landing_Zones_MG_Resource_Id: ${{ steps.managementGroups.outputs.Landing_Zones_MG_Resource_Id }}
      Corp_MG_Resource_Id: ${{ steps.managementGroups.outputs.Corp_MG_Resource_Id }}
      Online_MG_Resource_Id: ${{ steps.managementGroups.outputs.Online_MG_Resource_Id }}
      Decommisioned_MG_Resource_Id: ${{ steps.managementGroups.outputs.Decommisioned_MG_Resource_Id }}
      Sandbox_MG_Resource_Id: ${{ steps.managementGroups.outputs.Sandbox_MG_Resource_Id }}

    steps:
      - uses: actions/checkout@v2

      - uses: azure/login@v1
        name: Azure OIDC login
        with:         
          tenant-id: ${{ secrets.TENANT_ID }}
          client-id: ${{ secrets.CLIENT_ID }}
          allow-no-subscriptions: true
          enable-AzPSSession: true
      
      - shell: pwsh
        name: Ensure correct Az module is installed
        run: |
          if (Get-Module Az -ListAvailable | Where-Object { $_.Version -eq $az_powershell_min_version }) {
            Write-Output "Az module version $az_powershell_min_version is already installed"
            Import-Module Az -MinimumVersion $az_powershell_min_version
          }
          else {
              Install-Module -Name Az -AllowClobber -Force -Scope CurrentUser -Repository PSGallery -MinimumVersion $az_powershell_min_version
          }
          
      - shell: pwsh
        name: Processing Subscriptions and Management Groups
        id: managementGroups
        run: |
          ./process-management-groups-structure.ps1
      
      - shell: pwsh
        name: Read env variables
        run: |
          Get-ChildItem env: | fl
          
      
  
  deploy-policy-definitions-and-assignments:
    needs: deploy-management-groups
    runs-on: [self-hosted, linux]
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v2

      - run: echo "Top Management Group ID $Andor_MG_Resource_Id"
        env:
          Andor_MG_Resource_Id: ${{needs.deploy-management-groups.outputs.Andor_MG_Resource_Id }}
          Platform_MG_Resource_Id: ${{needs.deploy-management-groups.outputs.Platform_MG_Resource_Id }}
          Connectivity_MG_Resource_Id: ${{needs.deploy-management-groups.outputs.Connectivity_MG_Resource_Id }}
          Identity_MG_Resource_Id: ${{needs.deploy-management-groups.outputs.Identity_MG_Resource_Id }}
          Management_MG_Resource_Id: ${{needs.deploy-management-groups.outputs.Management_MG_Resource_Id }}
          Landing_Zones_MG_Resource_Id: ${{needs.deploy-management-groups.outputs.Landing_Zones_MG_Resource_Id }}
          Corp_MG_Resource_Id: ${{needs.deploy-management-groups.outputs.Corp_MG_Resource_Id }}
          Online_MG_Resource_Id: ${{needs.deploy-management-groups.outputs.Online_MG_Resource_Id }}
          Decommisioned_MG_Resource_Id: ${{needs.deploy-management-groups.outputs.Decommisioned_MG_Resource_Id }}
          Sandbox_MG_Resource_Id: ${{needs.deploy-management-groups.outputs.Sandbox_MG_Resource_Id }}

  deploy-custom-RBAC-role-definitions:
    runs-on: [self-hosted, linux]
    needs: deploy-policy-definitions-and-assignments
    permissions:
      contents: read
      id-token: write
    outputs:
      rolesSubscriptionOwnerRoleId: ${{ steps.customRbacRoleDefinitions.outputs.outRolesSubscriptionOwnerRoleId }}
      rolesApplicationOwnerRoleId: ${{ steps.customRbacRoleDefinitions.outputs.outRolesApplicationOwnerRoleId }}
      rolesNetworkManagementRoleId: ${{ steps.customRbacRoleDefinitions.outputs.outRolesNetworkManagementRoleId }}
      rolesSecurityOperationsRoleId: ${{ steps.customRbacRoleDefinitions.outputs.outRolesSecurityOperationsRoleId }}

    steps:
      - name: Checkout current repo
        uses: actions/checkout@v2
      
      - uses: azure/login@v1
        name: OIDC Login to Customer Tenant
        with:         
          tenant-id: ${{ secrets.TENANT_ID }}
          client-id: ${{ secrets.CLIENT_ID }}
          allow-no-subscriptions: true
          enable-AzPSSession: true

      - uses: azure/arm-deploy@v1 
        name: Deploy custom RBAC role definitions
        id: customRbacRoleDefinitions
        with:
          scope: managementgroup
          region: westeurope
          managementgroupid: ${{needs.deploy-management-groups.outputs.Andor_MG_Resource_Id }}
          template: modules/customRoleDefinitions/customRoleDefinitions.bicep
          parameters: >
            modules/customRoleDefinitions/parameters/customRoleDefinitions.parameters.all.json
            parAssignableScopeManagementGroupId=${{needs.deploy-management-groups.outputs.Andor_MG_Resource_Id }}

deploy-logging:
    runs-on: [self-hosted, linux]
    permissions:
      contents: read
      id-token: write
    outputs:
      resourceGroupNameLogging: ${{ steps.resourceGroupLogging.outputs.resourceGroupName }}
      workspaceId: ${{ steps.logging.outputs.outLogAnalyticsWorkspaceId }}
      workspaceName: ${{ steps.logging.outputs.outLogAnalyticsWorkspaceName }}
      laCustomerId: ${{ steps.logging.outputs.outLogAnalyticsCustomerId }}
      laSolutions: ${{ steps.logging.outputs.outLogAnalyticsSolutions }}
      automationAccountName: ${{ steps.logging.outputs.outAutomationAccountName }}
      automationAccountId: ${{ steps.logging.outputs.outAutomationAccountId }}

    steps:
      - uses: actions/checkout@v3

      - uses: azure/login@v1
        name: Azure OIDC login
        with:         
          tenant-id: ${{ secrets.TENANT_ID }}
          client-id: ${{ secrets.CLIENT_ID }}
          allow-no-subscriptions: true
          enable-AzPSSession: true
      
      - uses: azure/arm-deploy@v1
        name: Create the Resource Group for logging
        id: resourceGroupLogging
        with:
          scope: subscription
          region: westeurope
          subscriptionId: "FillinherethesubscriptionID"
          template: ARMtemplates/resourcGroup.json
          parameters: modules/logging/parameters/resourceGroup.parameters.json
      
      - uses: azure/arm-deploy@v1
        name: Create the Log Analytics Workspace
        id: logging
        with:
          template: modules/logging/logging.bicep
          parameters: modules/logging/parameters/logging.parameters.all.json
          resourceGroupName: ${{ steps.resourceGroupLogging.outputs.resourceGroupName }}

          deploy-logging:
    runs-on: [self-hosted, linux]
    permissions:
      contents: read
      id-token: write
    outputs:
      resourceGroupNameLogging: ${{ steps.resourceGroupLogging.outputs.resourceGroupName }}
      workspaceId: ${{ steps.logging.outputs.outLogAnalyticsWorkspaceId }}
      workspaceName: ${{ steps.logging.outputs.outLogAnalyticsWorkspaceName }}
      laCustomerId: ${{ steps.logging.outputs.outLogAnalyticsCustomerId }}
      laSolutions: ${{ steps.logging.outputs.outLogAnalyticsSolutions }}
      automationAccountName: ${{ steps.logging.outputs.outAutomationAccountName }}
      automationAccountId: ${{ steps.logging.outputs.outAutomationAccountId }}

    steps:
      - uses: actions/checkout@v3

      - uses: azure/login@v1
        name: Azure OIDC login
        with:         
          tenant-id: ${{ secrets.TENANT_ID }}
          client-id: ${{ secrets.CLIENT_ID }}
          allow-no-subscriptions: true
          enable-AzPSSession: true
      
      - uses: azure/arm-deploy@v1
        name: Create the Resource Group for logging
        id: resourceGroupLogging
        with:
          scope: subscription
          region: westeurope
          subscriptionId: "FillinherethesubscriptionID"
          template: ARMtemplates/resourcGroup.json
          parameters: modules/logging/parameters/resourceGroup.parameters.json
      
      - uses: azure/arm-deploy@v1
        name: Create the Log Analytics Workspace
        id: logging
        with:
          template: modules/logging/logging.bicep
          parameters: modules/logging/parameters/logging.parameters.all.json
          resourceGroupName: ${{ steps.resourceGroupLogging.outputs.resourceGroupName }}